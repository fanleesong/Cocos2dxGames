{"version":3,"sources":["../../../../assets/scripts/assets/scripts/ActorRenderer.js"],"names":["Game","require","Types","Utils","ActorPlayingState","cc","Class","extends","Component","properties","playerInfo","default","type","Node","stakeOnTable","cardInfo","cardPrefab","Prefab","anchorCards","spPlayerName","Sprite","labelPlayerName","Label","labelTotalStake","spPlayerPhoto","spCountdown","labelStakeOnTable","spChips","labelCardInfo","spCardInfo","animFX","cardSpace","onLoad","init","playerInfoPos","stakePos","turnDuration","switchSide","actor","getComponent","sgCountdown","position","string","name","updateTotalStake","gold","photoIdx","spriteFrame","instance","assetMng","playerPhotos","show","active","progressTimer","initCountdown","initDealer","num","countdownTex","texCountdown","getTexture","_ccsg","ProgressTimer","setName","setMidpoint","v2","setType","Type","RADIAL","_sgNode","addChild","setPosition","setPercentage","startCountdown","fromTo","progressFromTo","runAction","resetCountdown","stopAllActions","playBlackJackFX","playFX","playBustFX","onDeal","card","newCard","instantiate","node","reveal","startPos","index","cards","length","endPos","moveAction","moveTo","callback","callFunc","_onDealEnd","sequence","target","pointX","state","Normal","updatePoint","_updatePointPos","onReset","removeAllChildren","_resetChips","onRevealHoldCard","find","updateState","bestPoint","hand","Hand","BlackJack","FiveCard","xPos","x","showStakeChips","stake","chips","count","i","enabled","texCardInfo","Bust","min","getMinMaxPoint","texBust","Stand","max"],"mappings":"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","file":"ActorRenderer.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["var Game = require('Game');\nvar Types = require('Types');\nvar Utils = require('Utils');\nvar ActorPlayingState = Types.ActorPlayingState;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        playerInfo: {\n            default: null,\n            type: cc.Node\n        },\n        stakeOnTable: {\n            default: null,\n            type: cc.Node\n        },\n        cardInfo: {\n            default: null,\n            type: cc.Node\n        },\n        cardPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        anchorCards: {\n            default: null,\n            type: cc.Node\n        },\n        spPlayerName: {\n            default: null,\n            type: cc.Sprite\n        },\n        labelPlayerName: {\n            default: null,\n            type: cc.Label\n        },\n        labelTotalStake: {\n            default: null,\n            type: cc.Label\n        },\n        spPlayerPhoto: {\n            default: null,\n            type: cc.Sprite\n        },\n        spCountdown: {\n            default: null,\n            type: cc.Sprite\n        },\n        labelStakeOnTable: {\n            default: null,\n            type: cc.Label\n        },\n        spChips: {\n            default: [],\n            type: cc.Sprite\n        },\n        labelCardInfo: {\n            default: null,\n            type: cc.Label\n        },\n        spCardInfo: {\n            default: null,\n            type: cc.Sprite\n        },\n        animFX: {\n            default: null,\n            type: cc.Node\n        },\n        cardSpace: 0\n    },\n\n    onLoad: function () {\n    },\n\n    init: function ( playerInfo, playerInfoPos, stakePos, turnDuration, switchSide ) {\n        // actor\n        this.actor = this.getComponent('Actor');\n\n        // nodes\n        this.sgCountdown = null;\n        this.turnDuration = turnDuration;\n\n        this.playerInfo.position = playerInfoPos;\n        this.stakeOnTable.position = stakePos;\n        this.labelPlayerName.string = playerInfo.name;\n        this.updateTotalStake(playerInfo.gold);\n        var photoIdx = playerInfo.photoIdx % 5;\n        this.spPlayerPhoto.spriteFrame = Game.instance.assetMng.playerPhotos[photoIdx];\n        // fx\n        this.animFX = this.animFX.getComponent('FXPlayer');\n        this.animFX.init();\n        this.animFX.show(false);\n\n        this.cardInfo.active = false;\n\n        this.progressTimer = this.initCountdown();\n\n        // switch side\n        if (switchSide) {\n            this.spCardInfo.getComponent('SideSwitcher').switchSide();\n            this.spPlayerName.getComponent('SideSwitcher').switchSide();\n        }\n    },\n\n    initDealer: function () {\n        // actor\n        this.actor = this.getComponent('Actor');\n        // fx\n        this.animFX = this.animFX.getComponent('FXPlayer');\n        this.animFX.init();\n        this.animFX.show(false);\n    },\n\n    updateTotalStake: function (num) {\n        this.labelTotalStake.string = '$' + num;\n    },\n\n    initCountdown: function () {\n        var countdownTex = Game.instance.assetMng.texCountdown.getTexture();\n        this.sgCountdown = new _ccsg.Sprite(countdownTex);\n\n        var progressTimer = new cc.ProgressTimer(this.sgCountdown);\n        progressTimer.setName('progressTimer');\n        progressTimer.setMidpoint(cc.v2(0.5, 0.5));\n        progressTimer.setType(cc.ProgressTimer.Type.RADIAL);\n        this.playerInfo._sgNode.addChild(progressTimer);\n        progressTimer.setPosition(cc.v2(0, 0));\n        progressTimer.setPercentage(0);\n\n        return progressTimer;\n    },\n\n    startCountdown: function() {\n        if (this.progressTimer) {\n            var fromTo = cc.progressFromTo(this.turnDuration, 0, 100);\n            this.progressTimer.runAction(fromTo);\n        }\n    },\n\n    resetCountdown: function() {\n        if (this.progressTimer) {\n            this.progressTimer.stopAllActions();\n            this.progressTimer.setPercentage(0);\n        }\n    },\n\n    playBlackJackFX: function () {\n        this.animFX.playFX('blackjack');\n    },\n\n    playBustFX: function () {\n        this.animFX.playFX('bust');\n    },\n\n    onDeal: function (card, show) {\n        var newCard = cc.instantiate(this.cardPrefab).getComponent('Card');\n        this.anchorCards.addChild(newCard.node);\n        newCard.init(card);\n        newCard.reveal(show);\n\n        var startPos = cc.v2(0, 0);\n        var index = this.actor.cards.length - 1;\n        var endPos = cc.v2(this.cardSpace * index, 0);\n        newCard.node.setPosition(startPos);\n\n        var moveAction = cc.moveTo(0.5, endPos);\n        var callback = cc.callFunc(this._onDealEnd, this, this.cardSpace * index);\n        newCard.node.runAction(cc.sequence(moveAction, callback));\n    },\n\n    _onDealEnd: function(target, pointX) {\n        this.resetCountdown();\n        if(this.actor.state === ActorPlayingState.Normal) {\n            this.startCountdown();\n        }\n        this.updatePoint();\n        this._updatePointPos(pointX);\n    },\n\n    onReset: function () {\n        this.cardInfo.active = false;\n\n        this.anchorCards.removeAllChildren();\n\n        this._resetChips();\n    },\n\n    onRevealHoldCard: function () {\n        var card = cc.find('cardPrefab', this.anchorCards).getComponent('Card');\n        card.reveal(true);\n        this.updateState();\n    },\n\n    updatePoint: function () {\n        this.cardInfo.active = true;\n        this.labelCardInfo.string = this.actor.bestPoint;\n\n        switch (this.actor.hand) {\n            case Types.Hand.BlackJack:\n                this.animFX.show(true);\n                this.animFX.playFX('blackjack');\n                break;\n            case Types.Hand.FiveCard:\n                // TODO\n                break;\n        }\n    },\n\n    _updatePointPos: function (xPos) {\n        this.cardInfo.x = xPos + 50;\n    },\n\n    showStakeChips: function(stake) {\n        var chips = this.spChips;\n        var count = 0;\n        if (stake > 50000) {\n            count = 5;\n        } else if (stake > 25000) {\n            count = 4;\n        } else if (stake > 10000) {\n            count = 3;\n        } else if (stake > 5000) {\n            count = 2;\n        } else if (stake > 0) {\n            count = 1;\n        }\n        for (var i = 0; i < count; ++i) {\n            chips[i].enabled = true;\n        }\n    },\n\n    _resetChips: function () {\n        for (var i = 0; i < this.spChips.length; ++i) {\n            this.spChips.enabled = false;\n        }\n    },\n\n    updateState: function () {\n        switch (this.actor.state) {\n            case ActorPlayingState.Normal:\n                this.cardInfo.active = true;\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texCardInfo;\n                this.updatePoint();\n                break;\n            case ActorPlayingState.Bust:\n                var min = Utils.getMinMaxPoint(this.actor.cards).min;\n                this.labelCardInfo.string = '爆牌(' + min + ')';\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texBust;\n                this.cardInfo.active = true;\n                this.animFX.show(true);\n                this.animFX.playFX('bust');\n                this.resetCountdown();\n                break;\n            case ActorPlayingState.Stand:\n                var max = Utils.getMinMaxPoint(this.actor.cards).max;\n                this.labelCardInfo.string = '停牌(' + max + ')';\n                this.spCardInfo.spriteFrame = Game.instance.assetMng.texCardInfo;\n                this.resetCountdown();\n                // this.updatePoint();\n                break;\n        }\n    },\n});\n"]}