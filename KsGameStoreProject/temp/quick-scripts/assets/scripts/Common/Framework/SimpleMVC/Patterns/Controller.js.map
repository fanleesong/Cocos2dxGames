{"version":3,"sources":["Controller.js"],"names":["cc","Class","extends","Component","properties","_controllerName","_touchListenerId","_listenerHandle","sendNotification","name","body","ss","Facade","setControllerName","onRegister","onRemove","getControllerName","getHandleNotificationList","onNotification","notification","findNode","find","getCompByGlobalNode","nodeName","comp","node","getComponent","getCompByNode","getCompByLocalNode","timerOnce","callback","delay","scheduleOnce","timerAlways","duration","schedule","macro","REPEAT_FOREVER","timer","repeatTimes","stopAllTimer","unscheduleAllCallbacks","stopTimer","scheduleID","unschedule","registerTouchEvent","console","log","listener","event","EventListener","TOUCH_ONE_BY_ONE","swallowTouches","onTouchBegan","touches","onTouchMoved","onTouchEnded","eventManager","addListener","unregisterEvent","_listenerId","removeListener"],"mappings":"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","file":"Controller.js","sourceRoot":"../../../../../../../../assets/scripts/Common/Framework/SimpleMVC/Patterns","sourcesContent":["/**\n  @author : shilong\n  @time: 2017-07-24\n  @description: Controller类 (PureMVC中Command + Mediator的集合体)\n**/\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n     _controllerName : \"\",\n     _touchListenerId : -1,\n     _listenerHandle : null\n    },\n\n\n\n    /**\n     * 发送请求\n     * @param name\n     * @param body\n     */\n    sendNotification : function (name, body) {\n        cc.ss.Facade.sendNotification(name, body);\n    },\n\n    //设置controller名字\n    setControllerName : function(name) {\n      this._controllerName = name;\n\n    },\n\n    onRegister : function() {\n        //子类可重写\n    },\n\n    onRemove : function() {\n        //子类可重写\n    },\n\n    //返回Controller 名字\n    getControllerName : function() {\n        return this._controllerName;\n    },\n\n    //获取控制的Notification 数组\n    getHandleNotificationList : function() {\n        return [];\n    },\n\n    //接受通知\n    onNotification : function(notification) {\n      //子类必须重写，才能处理通知\n    },  /**\n       * 获取全局持久化节点\n       * @param  {[type]} name [description]\n       * @return {[type]}      [description]\n       */\n      findNode : function(name) {\n          return cc.find(name);\n      },\n\n      /**\n       * 全局查找node后获取组件\n       * @param  {[type]} nodeName [description]\n       * @param  {[type]} comp     [description]\n       * @return {[type]}          [description]\n       */\n      getCompByGlobalNode : function(nodeName, comp) {\n          return cc.find(node).getComponent(comp);\n      },\n\n      /**\n       * 通过节点获取组件\n       * @param  {[type]} node [description]\n       * @param  {[type]} comp [description]\n       * @return {[type]}      [description]\n       */\n      getCompByNode : function(node, comp) {\n          return node.getComponent(comp);\n      },\n\n  /**\n       * 通过节点获取组件\n       * @param  {[type]} node [description]\n       * @param  {[type]} comp [description]\n       * @return {[type]}      [description]\n       */\n      getCompByLocalNode : function(node, comp) {\n          return node.getComponent(comp);\n      },\n\n      //schedule once\n      timerOnce :function (callback, delay) {\n          this.scheduleOnce(callback, delay);\n      },\n\n\n      //schedule repeate\n      timerAlways : function(callback, duration) {\n          this.schedule(callback, duration, cc.macro.REPEAT_FOREVER);\n      },\n\n      //schedule run in repeatTimes\n      timer : function(callback, duration, repeatTimes) {\n          this.schedule(callback, duration, repeatTimes);\n      },\n\n      //stop all schedule timer\n      stopAllTimer : function() {\n          this.unscheduleAllCallbacks();\n      },\n\n      //stop scheduler by callbackPointer\n      stopTimer :function(scheduleID) {\n          this.unschedule(scheduleID);\n      },\n\n      registerTouchEvent : function() {\n        console.log(\"调用\");\n        var listener = {\n           event : cc.EventListener.TOUCH_ONE_BY_ONE,\n           swallowTouches : true,\n           onTouchBegan : function(touches, event) {\n                return true;\n           },\n           onTouchMoved : function(event) {\n\n           },\n           onTouchEnded : function(event) {\n\n           }\n        };\n\n        this._listenerHandle = cc.eventManager.addListener(listener, this.node);\n      },\n\n      unregisterEvent : function() {\n        if(this._listenerId !== -1)\n        {\n          cc.eventManager.removeListener(this._listenerHandle);\n        }\n      },\n});\n"]}