{"version":3,"sources":["ImageDownloadTask.js"],"names":["CryptUtil","require","StringUtil","BaseWebRequestTask","ImageDownloadTask","url","params","callback","dirPath","getHttpURL","filePath","md5Encode","jsb","fileUtils","isFileExist","_loadImage","_downloadImageToNative","xhr","getDownloadXMLHttpRequest","open","onload","oEvent","responseData","response","isDirectoryExist","createDirectory","writeDataToFile","Uint8Array","console","log","send","cc","loader","load","err","tex","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEA,IAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,IAAME,qBAAqBF,QAAQ,oBAAR,CAA3B;;IAEMG;;;AAEF,+BAAYC,GAAZ,EACA;AAAA,YADiBC,MACjB,uEAD0B,IAC1B;AAAA,YADgCC,QAChC;;AAAA;;AAAA,0IACUF,GADV,EACeC,MADf,EACuBC,QADvB;;AAEI,cAAKC,OAAL,GAAeF,MAAf;AAFJ;AAGC;;;;qCACY;AACT,iBAAKD,GAAL,GAAWH,WAAWO,UAAX,CAAsB,KAAKJ,GAA3B,CAAX;AACA,gBAAIK,WAAW,KAAKF,OAAL,GAAeR,UAAUW,SAAV,CAAoB,KAAKN,GAAzB,CAAf,GAA+C,MAA9D;;AAEA,gBAAIO,IAAIC,SAAJ,CAAcC,WAAd,CAA0BJ,QAA1B,CAAJ,EACA;AACI,qBAAKK,UAAL,CAAgBL,QAAhB;AACA;AACH;AACD,iBAAKM,sBAAL,CAA4BN,QAA5B;AACH;;;+CAEsBA,UACvB;AAAA;;AACI,gBAAIO,MAAM,KAAKC,yBAAL,EAAV;AACAD,gBAAIE,IAAJ,CAAS,KAAT,EAAgB,KAAKd,GAArB,EAA0B,IAA1B;AACAY,gBAAIG,MAAJ,GAAa,UAACC,MAAD,EAAY;AACrB,oBAAIC,eAAeL,IAAIM,QAAvB;AACA,oBAAG,OAAOD,YAAP,KAAwB,WAA3B,EAAuC;AACnC,wBAAI,CAACV,IAAIC,SAAJ,CAAcW,gBAAd,CAA+B,OAAKhB,OAApC,CAAL,EAAmDI,IAAIC,SAAJ,CAAcY,eAAd,CAA8B,OAAKjB,OAAnC;AACnD,wBAAII,IAAIC,SAAJ,CAAca,eAAd,CAA8B,IAAIC,UAAJ,CAAeL,YAAf,CAA9B,EAA4DZ,QAA5D,CAAJ,EAA0E;AACtEkB,gCAAQC,GAAR,CAAY,6BAAZ;AACA,+BAAKd,UAAL,CAAgBL,QAAhB;AACH,qBAHD,MAGM;AACFkB,gCAAQC,GAAR,CAAY,6BAAZ;AACH;AACJ,iBARD,MAQM;AACFD,4BAAQC,GAAR,CAAY,qCAAZ;AACH;AACJ,aAbD;AAcAZ,gBAAIa,IAAJ;AACH;;;;;AAGD;;;;;mCAKWpB,UAAS;AAAA;;AAChBqB,eAAGC,MAAH,CAAUC,IAAV,CAAevB,QAAf,EAAyB,UAACwB,GAAD,EAAMC,GAAN,EAAc;AACnC,oBAAGD,GAAH,EAAO;AACHN,4BAAQC,GAAR,sFAAuDK,GAAvD;AACH,iBAFD,MAEM;AACF,wBAAGC,GAAH,EAAO;AACH;AACA,+BAAK5B,QAAL,CAAc4B,GAAd;AACH,qBAHD,MAGM;AACF;AACH;AACJ;AACJ,aAXD;AAYH;;;;EA3D2BhC,qBA6D/B;;AAEDiC,OAAOC,OAAP,GAAiBjC,iBAAjB","file":"ImageDownloadTask.js","sourceRoot":"../../../../../../../assets/scripts/Common/Tool/WebRequest","sourcesContent":["const CryptUtil = require('CryptUtil');\n\nconst StringUtil = require('StringUtil');\nconst BaseWebRequestTask = require('BaseWebRequestTask');\n\nclass ImageDownloadTask extends BaseWebRequestTask\n{\n    constructor(url, params = null, callback)\n    {\n        super(url, params, callback);\n        this.dirPath = params;\n    }\n    doDownload() {\n        this.url = StringUtil.getHttpURL(this.url);\n        let filePath = this.dirPath + CryptUtil.md5Encode(this.url) + '.png';\n\n        if (jsb.fileUtils.isFileExist(filePath))\n        {\n            this._loadImage(filePath);\n            return;\n        }\n        this._downloadImageToNative(filePath);\n    }\n\n    _downloadImageToNative(filePath)\n    {\n        let xhr = this.getDownloadXMLHttpRequest();\n        xhr.open(\"GET\", this.url, true);\n        xhr.onload = (oEvent) => {\n            let responseData = xhr.response;\n            if(typeof responseData !== 'undefined'){\n                if (!jsb.fileUtils.isDirectoryExist(this.dirPath)) jsb.fileUtils.createDirectory(this.dirPath);\n                if (jsb.fileUtils.writeDataToFile(new Uint8Array(responseData), filePath)){\n                    console.log(\"[ImageDownloadTask]图片写入本地完成\");\n                    this._loadImage(filePath);\n                }else {\n                    console.log(\"[ImageDownloadTask]图片写入本地错误\");\n                }\n            }else {\n                console.log(\"[ImageDownloadTask]response data 错误\");\n            }\n        };\n        xhr.send();\n    };\n\n\n    /**\n     * 本地读取Texture\n     * @param filePath 本地全路径\n     * @private\n     */\n    _loadImage(filePath){\n        cc.loader.load(filePath, (err, tex) => {\n            if(err){\n                console.log(`[ImageDownloadTask]<_loadImage>引擎加载图片错误 ${err}`);\n            }else {\n                if(tex){\n                    // console.log(\"[ImageDownloadTask]tex读取完成\");\n                    this.callback(tex);\n                }else {\n                    // console.log(\"[ImageDownloadTask]<_loadImage>贴图错误\");\n                }\n            }\n        });\n    }\n\n}//end class\n\nmodule.exports = ImageDownloadTask;"]}