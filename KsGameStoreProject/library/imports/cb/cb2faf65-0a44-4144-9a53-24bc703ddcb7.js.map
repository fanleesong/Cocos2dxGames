{"version":3,"sources":["../../../../../../../../assets/scripts/Common/Framework/SimpleMVC/Core/assets/scripts/Common/Framework/SimpleMVC/Core/Med.js"],"names":["Observer","require","Med","_observerMap","_controllerMap","controller","getControllerName","wantHandleList","getHandleNotificationList","observer","lazyInit","onNotification","i","length","registerObserver","onRegister","notificationName","push","notification","getName","observerArr","notifyObserver","controllerName","handleList","removeObserver","onRemove","notifyContext","observers","compareNotifyContext","splice","_medInstance","undefined","console","log","module","exports"],"mappings":"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":"Med.js","sourceRoot":"../../../../../../../../assets/scripts/Common/Framework/SimpleMVC/Core","sourcesContent":["/**\n  @author : shilong\n  @time: 2017-07-24\n  @description: Med类 --（Controller管理类）\n**/\nconst Observer = require('Observer');\n\nclass Med\n{\n    constructor()\n    {\n        this._observerMap = [];\n        this._controllerMap = [];\n\n    }\n    //获取View 静态实例\n    static getMed() {\n        if (this._medInstance === null || this._medInstance === undefined){\n          this._medInstance = new  Med();\n          console.log(`[Med]初始化Model静态实例`);\n        }\n        return this._medInstance;\n    }\n\n    //注册组件\n    registerController(controller) {\n        if (this._controllerMap[controller.getControllerName()] != null) {\n            return;\n        }\n        this._controllerMap[controller.getControllerName()] = controller;\n\n        let wantHandleList = controller.getHandleNotificationList();\n        let observer = new Observer();\n        observer.lazyInit(controller.onNotification, controller);\n\n        for (let i = 0; i < wantHandleList.length; i++) {\n            this.registerObserver(wantHandleList[i], observer);\n        }\n\n        controller.onRegister();\n    }\n\n    //注册监听器\n    registerObserver(notificationName, observer) {\n        if (this._observerMap[notificationName] != null) {\n            this._observerMap[notificationName].push(observer);\n        }else{\n            this._observerMap[notificationName] = [observer];\n        }\n    }\n\n    //通知\n    notifyObservers(notification) {\n        if (this._observerMap[notification.getName()] != null) {\n            let observerArr = this._observerMap[notification.getName()];\n            for (let i = 0; i < observerArr.length; i++) {\n                let observer = observerArr[i];\n                observer.notifyObserver(notification);\n            }\n        }\n    }\n\n    //移除Controller\n    removeController(controllerName) {\n        let controller =  this._controllerMap[controllerName];\n        if (controller) {\n            let handleList = controller.getHandleNotificationList();\n\n            //删除Observer\n            for (let i = 0; i < handleList.length; i++) {\n                this.removeObserver(handleList[i], controller);\n            }\n            //从map中删除controller\n            delete this._controllerMap[controllerName];\n            controller.onRemove();\n        }\n    }\n\n    removeObserver(notificationName, notifyContext) {\n        let observers = this._observerMap[notificationName];\n        for (let i = 0; i < observers.length; i++) {\n            let observer = observers[i];\n            if (observer.compareNotifyContext(notifyContext) === true) {\n                observers.splice(i, 1);\n                break;\n            }\n        }\n\n        if (observers.length === 0) {//如果长度为空,删除整个item\n            delete this._observerMap[notificationName];\n        }\n    }\n\n}//end class\n\nmodule.exports = Med;\n\n//\n// const Med = cc.Class({\n//\n//     //静态变量\n//     statics : {\n//       _medInstance : null,\n//\n//       //获取View 静态实例\n//       getMed : function() {\n//           if (this._medInstance === null) {\n//             this._medInstance = new  Med();\n//           }\n//           return this._medInstance;\n//       },\n//     },\n//\n//     //对象变量\n//     properties: {\n//       _observerMap : [],\n//       _controllerMap : []\n//     },\n//\n//     //注册组件\n//     registerController : function(controller) {\n//       if (this._controllerMap[controller.getControllerName()] != null) {\n//         return;\n//       }\n//       this._controllerMap[controller.getControllerName()] = controller;\n//\n//       let wantHandleList = controller.getHandleNotificationList();\n//       let observer = new Observer();\n//       observer.lazyInit(controller.onNotification, controller);\n//\n//       for (var i = 0; i < wantHandleList.length; i++) {;\n//         this.registerObserver(wantHandleList[i], observer);\n//       }\n//\n//       controller.onRegister();\n//     },\n//\n//     //注册监听器\n//     registerObserver : function(notificationName, observer) {\n//       if (this._observerMap[notificationName] != null) {\n//           this._observerMap[notificationName].push(observer);\n//       }else{\n//           this._observerMap[notificationName] = [observer];\n//        }\n//     },\n//\n//     //通知\n//     notifyObservers : function(notification) {\n//       // console.log(\"View notifyObservers\");\n//       // console.log(notification.getName());\n//       // console.log(notification.getBody());\n//       if (this._observerMap[notification.getName()] != null) {\n//           let observerArr = this._observerMap[notification.getName()];\n//\n//           for (var i = 0; i < observerArr.length; i++) {\n//             let observer = observerArr[i];\n//             observer.notifyObserver(notification);\n//           }\n//       }\n//     },\n//\n//     //移除Controller\n//     removeController : function(controllerName) {\n//       let controller =  this._controllerMap[controllerName];\n//       if (controller) {\n//         let handleList = controller.getHandleNotificationList();\n//\n//         //删除Observer\n//         for (var i = 0; i < handleList.length; i++) {\n//           this.removeObserver(handleList[i], controller);\n//         }\n//\n//         //从map中删除controller\n//         delete this._controllerMap[controllerName];\n//         controller.onRemove();\n//\n//       }\n//     },\n//\n//     removeObserver : function(notificationName, notifyContext) {\n//         let observers = this._observerMap[notificationName];\n//         for (var i = 0; i < observers.length; i++) {\n//           let observer = observers[i];\n//           if (observer.compareNotifyContext(notifyContext) === true) {\n//               observers.splice(i, 1);\n//               // console.log(\"成功删除\");\n//               break;\n//           }\n//         }\n//\n//         if (observers.length === 0) {//如果长度为空,删除整个item\n//             delete this._observerMap[notificationName];\n//         }\n//     },\n//\n// });\n"]}