{"version":3,"sources":["../../../../../../../assets/scripts/Common/Tool/WebRequest/assets/scripts/Common/Tool/WebRequest/AudioDownloadTask.js"],"names":["CryptUtil","require","StringUtil","BaseWebRequestTask","AudioDownloadTask","url","params","callback","dirPath","getHttpURL","filePath","md5Encode","jsb","fileUtils","isFileExist","_loadAudio","_downloadAudioToNative","xhr","getDownloadXMLHttpRequest","open","onload","oEvent","createDirectory","arrayBuffer","response","writeDataToFile","Uint8Array","console","log","onerror","send","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,IAAME,qBAAqBF,QAAQ,oBAAR,CAA3B;;IAEMG;;;AACF,+BAAYC,GAAZ,EACA;AAAA,YADiBC,MACjB,uEAD0B,IAC1B;AAAA,YADgCC,QAChC;;AAAA;;AAAA,0IACUF,GADV,EACeC,MADf,EACuBC,QADvB;;AAEI,cAAKC,OAAL,GAAeF,MAAf;AAFJ;AAGC;;;;qCAGY;AACT,iBAAKD,GAAL,GAAWH,WAAWO,UAAX,CAAsB,KAAKJ,GAA3B,CAAX;AACA,gBAAIK,WAAW,KAAKF,OAAL,GAAeR,UAAUW,SAAV,CAAoB,KAAKN,GAAzB,CAAf,GAA+C,MAA9D;;AAEA,gBAAGO,IAAIC,SAAJ,CAAcC,WAAd,CAA0BJ,QAA1B,CAAH,EAAuC;AACnC,qBAAKK,UAAL,CAAgBL,QAAhB;AACA;AACH;AACD,iBAAKM,sBAAL,CAA4BN,QAA5B;AACH;;;mCAEUA,UACX;AACI,iBAAKH,QAAL,CAAcG,QAAd;AACH;;;+CAEsBA,UACvB;AAAA;;AACI,gBAAIO,MAAM,KAAKC,yBAAL,EAAV;AACAD,gBAAIE,IAAJ,CAAS,KAAT,EAAgB,KAAKd,GAArB,EAA0B,IAA1B;AACAY,gBAAIG,MAAJ,GAAa,UAACC,MAAD,EAAY;AACrB,oBAAI,CAACT,IAAIC,SAAJ,CAAcC,WAAd,CAA0B,OAAKN,OAA/B,CAAL,EAA8CI,IAAIC,SAAJ,CAAcS,eAAd,CAA8B,OAAKd,OAAnC;AAC9C,oBAAIe,cAAcN,IAAIO,QAAtB;AACA,oBAAIZ,IAAIC,SAAJ,CAAcY,eAAd,CAA8B,IAAIC,UAAJ,CAAeH,WAAf,CAA9B,EAA2Db,QAA3D,CAAJ,EAA0E;AACtEiB,4BAAQC,GAAR,CAAY,gCAAZ;AACA,2BAAKb,UAAL,CAAgBL,QAAhB;AACA;AACH;AACDiB,wBAAQC,GAAR,CAAY,gCAAZ;AACA,uBAAKrB,QAAL,CAAc,IAAd;AACH,aAVD;AAWAU,gBAAIY,OAAJ,GAAc,YAAM;AAChBF,wBAAQC,GAAR,CAAY,8BAAZ;AACA,uBAAKrB,QAAL,CAAc,IAAd;AACH,aAHD;;AAKAU,gBAAIa,IAAJ,CAAS,IAAT;AACH;;;;EA7C2B3B,qBA+C/B;;AAED4B,OAAOC,OAAP,GAAiB5B,iBAAjB","file":"AudioDownloadTask.js","sourceRoot":"../../../../../../../assets/scripts/Common/Tool/WebRequest","sourcesContent":["const CryptUtil = require('CryptUtil');\nconst StringUtil = require('StringUtil');\nconst BaseWebRequestTask = require('BaseWebRequestTask');\n\nclass AudioDownloadTask extends BaseWebRequestTask{\n    constructor(url, params = null, callback)\n    {\n        super(url, params, callback);\n        this.dirPath = params;\n    }\n\n\n    doDownload() {\n        this.url = StringUtil.getHttpURL(this.url);\n        let filePath = this.dirPath + CryptUtil.md5Encode(this.url) + '.mp3';\n\n        if(jsb.fileUtils.isFileExist(filePath)){\n            this._loadAudio(filePath);\n            return;\n        }\n        this._downloadAudioToNative(filePath);\n    }\n\n    _loadAudio(filePath)\n    {\n        this.callback(filePath);\n    }\n\n    _downloadAudioToNative(filePath)\n    {\n        let xhr = this.getDownloadXMLHttpRequest();\n        xhr.open(\"GET\", this.url, true);\n        xhr.onload = (oEvent) => {\n            if (!jsb.fileUtils.isFileExist(this.dirPath)) jsb.fileUtils.createDirectory(this.dirPath);\n            let arrayBuffer = xhr.response;\n            if (jsb.fileUtils.writeDataToFile(new Uint8Array(arrayBuffer), filePath)) {\n                console.log(\"[AudioDownloadTask]Audio写入本地成功\");\n                this._loadAudio(filePath);\n                return;\n            }\n            console.log(\"[AudioDownloadTask]Audio写入本地失败\");\n            this.callback(null);\n        };\n        xhr.onerror = () => {\n            console.log(\"[AudioDownloadTask]Audio本地错误\");\n            this.callback(null);\n        };\n\n        xhr.send(null);\n    }\n\n}//end class\n\nmodule.exports = AudioDownloadTask;"]}