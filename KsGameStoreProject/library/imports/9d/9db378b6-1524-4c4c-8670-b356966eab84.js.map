{"version":3,"sources":["../../../../../../assets/scripts/Common/Tool/assets/scripts/Common/Tool/StringUtil.js"],"names":["CryptUtil","require","module","exports","replaceString","srcStr","replaceStr","idx","lastIndexOf","substr","length","getHttpURL","url","httpsStr","subStr","prefixInteger","num","n","Array","join","slice","parseAudioUrlToLocalFilePath","audioUrl","undefined","filePath","jsb","fileUtils","getWritablePath","cc","ss","GlobalConst","AUDIO_CACHE_PATH","md5Encode","isEmpty","str"],"mappings":";;;;;;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACAC,OAAOC,OAAP,GAAiB;AACbC,iBADa,yBACCC,MADD,EACSC,UADT,EACoB;AAC7B,YAAIC,MAAMF,OAAOG,WAAP,CAAmBF,UAAnB,CAAV;AACA,YAAIC,OAAO,CAAX,EAAc;AACV,mBAAOF,OAAOI,MAAP,CAAcH,WAAWI,MAAzB,EAAiCL,OAAOK,MAAxC,CAAP;AACH;;AAED,eAAOL,MAAP;AACH,KARY;;;AAUb;;;;;AAKAM,cAfa,sBAeFC,GAfE,EAgBb;AACI,YAAIC,WAAW,OAAf;AACA,YAAIN,MAAMK,IAAIJ,WAAJ,CAAgBK,QAAhB,CAAV;AACA,YAAIN,OAAO,CAAX,EAAc;AACV,gBAAIO,SAASF,IAAIH,MAAJ,CAAWI,SAASH,MAApB,EAA4BE,IAAIF,MAAhC,CAAb;AACA,mBAAQ,SAASI,MAAjB;AACH;AACD,eAAOF,GAAP;AACH,KAxBY;;;AA0Bb;;;;;;AAMAG,iBAhCa,yBAgCCC,GAhCD,EAgCMC,CAhCN,EAgCQ;;AAEjB,eAAO,CAACC,MAAMD,CAAN,EAASE,IAAT,CAAc,CAAd,IAAmBH,GAApB,EAAyBI,KAAzB,CAA+B,CAACH,CAAhC,CAAP;AACH,KAnCY;;;AAqCb;;;;;AAKAI,gCA1Ca,wCA0CgBC,QA1ChB,EA0CyB;AAClC;AACA,YAAIA,aAAa,IAAb,IAAqBA,aAAaC,SAAtC,EAAiD,OAAO,EAAP;AACjD,YAAIX,MAAM,KAAKD,UAAL,CAAgBW,QAAhB,CAAV;AACA,YAAIE,WAAWC,IAAIC,SAAJ,CAAcC,eAAd,KAAkCC,GAAGC,EAAH,CAAMC,WAAN,CAAkBC,gBAApD,GAAuE/B,UAAUgC,SAAV,CAAoBpB,GAApB,CAAvE,GAAkG,MAAjH;AACA;AACA,eAAOY,QAAP;AACH,KAjDY;;;AAmDb;;;;;AAKAS,WAxDa,mBAwDLC,GAxDK,EAyDb;AACI,eAAQA,QAAQ,IAAR,IAAgBA,QAAQX,SAAxB,IAAqCW,QAAQ,EAArD;AACH;AA3DY,CAAjB","file":"StringUtil.js","sourceRoot":"../../../../../../assets/scripts/Common/Tool","sourcesContent":["const CryptUtil = require(\"CryptUtil\");\nmodule.exports = {\n    replaceString(srcStr, replaceStr){\n        let idx = srcStr.lastIndexOf(replaceStr);\n        if (idx >= 0) {\n            return srcStr.substr(replaceStr.length, srcStr.length);\n        }\n\n        return srcStr;\n    },\n\n    /**\n     * https转换http\n     * @param url\n     * @returns {*}\n     */\n    getHttpURL(url)\n    {\n        let httpsStr = \"https\";\n        let idx = url.lastIndexOf(httpsStr);\n        if (idx >= 0) {\n            let subStr = url.substr(httpsStr.length, url.length);\n            return  \"http\" + subStr;\n        }\n        return url;\n    },\n\n    /**\n     * 0补位\n     * @param num\n     * @param n\n     * @returns {string}\n     */\n    prefixInteger(num, n){\n\n        return (Array(n).join(0) + num).slice(-n);\n    },\n\n    /**\n     * 转换音频路径\n     * @param audioUrl\n     * @returns {*}\n     */\n    parseAudioUrlToLocalFilePath(audioUrl){\n        // cc.log(\"[StringUtils]-->转换前-->URL：  \" + audioUrl);\n        if (audioUrl === null || audioUrl === undefined) return \"\";\n        let url = this.getHttpURL(audioUrl);\n        let filePath = jsb.fileUtils.getWritablePath() + cc.ss.GlobalConst.AUDIO_CACHE_PATH + CryptUtil.md5Encode(url) + '.mp3';\n        // cc.log(\"[StringUtils]-->转换后-->URL：  \" + CryptUtil.md5Encode(url) + '.mp3');\n        return filePath;\n    },\n\n    /**\n     * 判断非法或者空字符串\n     * @param str\n     * @returns {boolean}\n     */\n    isEmpty(str)\n    {\n        return (str === null || str === undefined || str === \"\");\n    }\n\n};"]}